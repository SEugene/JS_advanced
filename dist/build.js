/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./public/js/BasketComponent.js":
/*!**************************************!*\
  !*** ./public/js/BasketComponent.js ***!
  \**************************************/
/***/ (() => {

eval("const basketItem = {\n  props: ['basket_item'],\n  template: `        \n            <div class=\"prod_item\">   \n                <div class=\"description\">\n                    <h4>{{ basket_item.product_name }}</h4>\n                    <div class=\"price\">\n                        Цена: <span>{{ basket_item.price }}</span>$                                        \n                        <div class=\"basket_quantity\">    \n                            <button class=\"buy-btn\" @click=\"$root.$refs.basket.addProduct(basket_item)\">+</button>\n                            <span>{{ basket_item.quantity }}</span>шт.\n                            <button class=\"decrease-btn\" @click=\"$root.$refs.basket.deleteProduct(basket_item)\">-</button>\n                        </div>\n                        Сумма по товару: <span>{{ basket_item.price * basket_item.quantity }}</span>$ \n                    </div>    \n                </div>\n            </div>   \n\n`\n};\nconst basket = {\n  components: {\n    'basket-item': basketItem\n  },\n  data() {\n    return {\n      myBasket: {\n        basketItems: [],\n        basketTotalSum: 0\n      },\n      basketUrl: '/getBasket.json'\n    };\n  },\n  /*\n      methods:{\n          addProduct(product){\n              const basketCheck = this.myBasket.basketItems.find(good => good.id_product === product.id_product);\n              if (basketCheck) {\n                  basketCheck.quantity++;\n                  this.myBasket.basketTotalSum += basketCheck.price\n              } else {\n                  let prod = Object.assign ({quantity: 1}, product)\n                  this.myBasket.basketItems.push (prod)\n                  this.myBasket.basketTotalSum += product.price\n              };\n              console.log(this.myBasket.basketTotalSum)\n          },\n  \n          deleteProduct(product){\n              if (product.quantity>1) {\n                  product.quantity--;\n                  this.myBasket.basketTotalSum -= product.price\n                  \n              } else {\n                  this.myBasket.basketItems.splice(this.myBasket.basketItems.indexOf(product), 1);\n                  this.myBasket.basketTotalSum -= product.price\n                  \n              };\n              console.log(this.myBasket.basketTotalSum)\n          },\n      },\n  */\n\n  mounted() {\n    this.$parent.getJson(`/api/cart`).then(data => {\n      for (let el of data.contents) {\n        this.myBasket.basketItems.push(el);\n        this.myBasket.basketTotalSum += el.price * el.quantity;\n      }\n    });\n  },\n  methods: {\n    addProduct(product) {\n      const basketCheck = this.myBasket.basketItems.find(good => good.id_product === product.id_product);\n      if (basketCheck) {\n        this.$parent.putJson(`/api/cart/${basketCheck.id_product}`, {\n          quantity: 1\n        }).then(data => {\n          if (data.result === 1) {\n            basketCheck.quantity++;\n            this.myBasket.basketTotalSum += basketCheck.price;\n          }\n        });\n      } else {\n        const prod = Object.assign({\n          quantity: 1\n        }, product);\n        this.$parent.postJson(`/api/cart`, prod).then(data => {\n          if (data.result === 1) {\n            this.myBasket.basketItems.push(prod);\n            this.myBasket.basketTotalSum += product.price;\n          }\n        });\n      }\n    },\n    deleteProduct(product) {\n      const basketCheck = this.myBasket.basketItems.find(good => good.id_product === product.id_product);\n      if (basketCheck) {\n        if (basketCheck.quantity > 1) {\n          this.$parent.putJson(`/api/cart/${basketCheck.id_product}`, {\n            quantity: -1\n          }).then(data => {\n            if (data.result === 1) {\n              basketCheck.quantity--;\n              this.myBasket.basketTotalSum -= basketCheck.price;\n            }\n          });\n        } else {\n          this.$parent.deleteJson(`/api/cart/${basketCheck.id_product}`).then(data => {\n            if (data.result === 1) {\n              this.myBasket.basketItems.splice(this.myBasket.basketItems.indexOf(product), 1);\n              this.myBasket.basketTotalSum -= product.price;\n            }\n          });\n        }\n      }\n    }\n  },\n  template: `  \n    <div id=\"openModal\" class=\"modalDialog\">\n        <div>\n            <a href=\"#close\" title=\"Закрыть\" class=\"close\">X</a>\n            <h2 class=\"product_sum\">В корзине товаров: {{ myBasket.basketItems.length }} на {{ myBasket.basketTotalSum }} $</h2>\n            <div class=\"basket\">\n                <basket-item v-for=\"item of myBasket.basketItems\" \n                :key=\"item.id_product\" \n                :basket_item=\"item\" >\n                </basket-item>\n            </div>\n        </div>\n    </div>\n    `\n};\n\n//# sourceURL=webpack:///./public/js/BasketComponent.js?");

/***/ }),

/***/ "./public/js/ProductComponent.js":
/*!***************************************!*\
  !*** ./public/js/ProductComponent.js ***!
  \***************************************/
/***/ (() => {

eval("const product = {\n  props: ['product', 'img'],\n  template: `\n        <div class=\"prod_item\">                \n            <div class=\"img_item\">\n                <img :src=\"img\" alt=\"Some img\">\n            </div>\n\n            <div class=\"item\">                    \n                <div class=\"description\">\n                    <h4>{{product.product_name}}</h4>\n                    <div class=\"price\">\n                        Цена: <span>{{product.price}}</span>$\n                    </div>\n                </div>\n            </div>\n                            \n            <div class=\"sale\">             \n                <button class=\"buy-btn\" @click=\"$root.$refs.basket.addProduct(product)\">Купить</button>\n            </div>       \n        </div>         \n    `\n};\nconst products = {\n  components: {\n    product\n  },\n  data() {\n    return {\n      catalogUrl: '/catalogData.json',\n      products: [],\n      filtered: []\n    };\n  },\n  mounted() {\n    this.$parent.getJson(`/api/products`).then(data => {\n      for (let el of data) {\n        this.products.push(el);\n      }\n    });\n    this.filtered = this.products;\n  },\n  methods: {\n    filterGoods(searchLine) {\n      const regexp = new RegExp(searchLine, 'i');\n      this.filtered = this.products.filter(product => regexp.test(product.product_name));\n    }\n  },\n  template: `<div class=\"products\">\n    <product v-for=\"item of filtered\" \n    :key=\"item.id_product\" \n    :img=\"item.img\"\n    :product=\"item\"></product>\n   </div>`\n};\n\n//# sourceURL=webpack:///./public/js/ProductComponent.js?");

/***/ }),

/***/ "./public/js/SearchComponent.js":
/*!**************************************!*\
  !*** ./public/js/SearchComponent.js ***!
  \**************************************/
/***/ (() => {

eval("const search_element = {\n  data() {\n    return {\n      searchLine: ''\n    };\n  },\n  template: `\n        <form action=\"#\" class=\"search-form\" @submit.prevent='$parent.$refs.products.filterGoods(searchLine)'>\n            <input type=\"text\" class=\"search-field\" v-model=\"searchLine\">\n            <button type=\"submit\" class=\"btn-search\">\n                <i class=\"fas fa-search\"></i>\n            </button>\n        </form>\n      `\n};\n\n//# sourceURL=webpack:///./public/js/SearchComponent.js?");

/***/ }),

/***/ "./public/js/main.js":
/*!***************************!*\
  !*** ./public/js/main.js ***!
  \***************************/
/***/ (() => {

eval("const API = 'https://raw.githubusercontent.com/GeekBrainsTutorial/online-store-api/master/responses';\nconst app = new Vue({\n  el: '#app',\n  data: {\n    catalogUrl: '/catalogData.json',\n    products: [],\n    filtered: [],\n    myBasket: {\n      basketItems: [],\n      basketTotalSum: 0\n    },\n    img: 'img/gamepad.webp',\n    searchLine: ''\n  },\n  components: {\n    basket,\n    products,\n    search_element\n  },\n  methods: {\n    getJson(url) {\n      return fetch(url).then(result => result.json()).catch(error => {\n        console.log(error);\n      });\n    },\n    postJson(url, data) {\n      return fetch(url, {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(data)\n      }).then(result => result.json()).catch(error => {\n        console.log(error);\n      });\n    },\n    putJson(url, data) {\n      return fetch(url, {\n        method: 'PUT',\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(data)\n      }).then(result => result.json()).catch(error => {\n        console.log(error);\n      });\n    },\n    deleteJson(url) {\n      return fetch(url, {\n        method: 'DELETE',\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(result => result.json()).catch(error => {\n        console.log(error);\n      });\n    }\n  },\n  mounted() {}\n});\n\n// class List {\n//     constructor(url, container, list = list2){\n//         this.container = container;\n//         this.list = list;\n//         this.url = url;\n//         this.goods = [];\n//         this.allProducts = [];\n//         this.filtered = [];\n//         this._init();\n//     }\n//     getJson(url){\n//         return fetch(url ? url : `${API + this.url}`)\n//             .then(result => result.json())\n//             .catch(error => {\n//                 console.log(error);\n//             })\n//     }\n//     handleData(data){\n//         this.goods = [...data];\n//         this.render();\n//     }\n//     calcSum(){\n//         return this.allProducts.reduce((accum, item) => accum += item.price, 0);\n//     }\n//     render(){\n//         const block = document.querySelector(this.container);\n//         for (let product of this.goods){\n//             const productObj = new this.list[this.constructor.name](product);\n//             console.log(productObj);\n//             this.allProducts.push(productObj);\n//             block.insertAdjacentHTML('beforeend', productObj.render());\n//         }\n//     }\n//     filter(value){\n//         const regexp = new RegExp(value, 'i');\n//         this.filtered = this.allProducts.filter(product => regexp.test(product.product_name));\n//         this.allProducts.forEach(el => {\n//             const block = document.querySelector(`.product-item[data-id=\"${el.id_product}\"]`);\n//             if(!this.filtered.includes(el)){\n//                 block.classList.add('invisible');\n//             } else {\n//                 block.classList.remove('invisible');\n//             }\n//         })\n//     }\n//     _init(){\n//         return false\n//     }\n// }\n//\n// class Item{\n//     constructor(el, img = 'https://placehold.it/200x150'){\n//         this.product_name = el.product_name;\n//         this.price = el.price;\n//         this.id_product = el.id_product;\n//         this.img = img;\n//     }\n//     render(){\n//         return `<div class=\"product-item\" data-id=\"${this.id_product}\">\n//                 <img src=\"${this.img}\" alt=\"Some img\">\n//                 <div class=\"desc\">\n//                     <h3>${this.product_name}</h3>\n//                     <p>${this.price} $</p>\n//                     <button class=\"buy-btn\"\n//                     data-id=\"${this.id_product}\"\n//                     data-name=\"${this.product_name}\"\n//                     data-price=\"${this.price}\">Купить</button>\n//                 </div>\n//             </div>`\n//     }\n// }\n//\n// class ProductsList extends List{\n//     constructor(cart, container = '.products', url = \"/catalogData.json\"){\n//         super(url, container);\n//         this.cart = cart;\n//         this.getJson()\n//             .then(data => this.handleData(data));\n//     }\n//     _init(){\n//         document.querySelector(this.container).addEventListener('click', e => {\n//             if(e.target.classList.contains('buy-btn')){\n//                 this.cart.addProduct(e.target);\n//             }\n//         });\n//         document.querySelector('.search-form').addEventListener('submit', e => {\n//             e.preventDefault();\n//             this.filter(document.querySelector('.search-field').value)\n//         })\n//     }\n// }\n//\n//\n// class ProductItem extends Item{}\n//\n// class Cart extends List{\n//     constructor(container = \".cart-block\", url = \"/getBasket.json\"){\n//         super(url, container);\n//         this.getJson()\n//             .then(data => {\n//                 this.handleData(data.contents);\n//             });\n//     }\n//     addProduct(element){\n//         this.getJson(`${API}/addToBasket.json`)\n//             .then(data => {\n//                 if(data.result === 1){\n//                     let productId = +element.dataset['id'];\n//                     let find = this.allProducts.find(product => product.id_product === productId);\n//                     if(find){\n//                         find.quantity++;\n//                         this._updateCart(find);\n//                     } else {\n//                         let product = {\n//                             id_product: productId,\n//                             price: +element.dataset['price'],\n//                             product_name: element.dataset['name'],\n//                             quantity: 1\n//                         };\n//                         this.goods = [product];\n//                         this.render();\n//                     }\n//                 } else {\n//                     alert('Error');\n//                 }\n//             })\n//     }\n//     removeProduct(element){\n//         this.getJson(`${API}/deleteFromBasket.json`)\n//             .then(data => {\n//                 if(data.result === 1){\n//                     let productId = +element.dataset['id'];\n//                     let find = this.allProducts.find(product => product.id_product === productId);\n//                     if(find.quantity > 1){\n//                         find.quantity--;\n//                         this._updateCart(find);\n//                     } else {\n//                         this.allProducts.splice(this.allProducts.indexOf(find), 1);\n//                         document.querySelector(`.cart-item[data-id=\"${productId}\"]`).remove();\n//                     }\n//                 } else {\n//                     alert('Error');\n//                 }\n//             })\n//     }\n//     _updateCart(product){\n//        let block = document.querySelector(`.cart-item[data-id=\"${product.id_product}\"]`);\n//        block.querySelector('.product-quantity').textContent = `Quantity: ${product.quantity}`;\n//        block.querySelector('.product-price').textContent = `$${product.quantity*product.price}`;\n//     }\n//     _init(){\n//         document.querySelector('.btn-cart').addEventListener('click', () => {\n//             document.querySelector(this.container).classList.toggle('invisible');\n//         });\n//         document.querySelector(this.container).addEventListener('click', e => {\n//            if(e.target.classList.contains('del-btn')){\n//                this.removeProduct(e.target);\n//            }\n//         })\n//     }\n//\n// }\n//\n// class CartItem extends Item{\n//     constructor(el, img = 'https://placehold.it/50x100'){\n//         super(el, img);\n//         this.quantity = el.quantity;\n//     }\n//     render(){\n//     return `<div class=\"cart-item\" data-id=\"${this.id_product}\">\n//             <div class=\"product-bio\">\n//             <img src=\"${this.img}\" alt=\"Some image\">\n//             <div class=\"product-desc\">\n//             <p class=\"product-title\">${this.product_name}</p>\n//             <p class=\"product-quantity\">Quantity: ${this.quantity}</p>\n//         <p class=\"product-single-price\">$${this.price} each</p>\n//         </div>\n//         </div>\n//         <div class=\"right-block\">\n//             <p class=\"product-price\">$${this.quantity*this.price}</p>\n//             <button class=\"del-btn\" data-id=\"${this.id_product}\">&times;</button>\n//         </div>\n//         </div>`\n//     }\n// }\n// const list2 = {\n//     ProductsList: ProductItem,\n//     Cart: CartItem\n// };\n//\n// let cart = new Cart();\n// let products = new ProductsList(cart);\n// products.getJson(`getProducts.json`).then(data => products.handleData(data));\n\n//# sourceURL=webpack:///./public/js/main.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	__webpack_modules__["./public/js/main.js"]();
/******/ 	__webpack_modules__["./public/js/BasketComponent.js"]();
/******/ 	__webpack_modules__["./public/js/SearchComponent.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./public/js/ProductComponent.js"]();
/******/ 	
/******/ })()
;